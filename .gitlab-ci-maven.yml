#
# FILE: .gitlab-ci.yml
#
# DESCRIPTION: This file sets up the CI pipeline for a Java Project.
#   It aims at implementing the oficial GitFlow workflow from the CI/CD
#   perspective.
#   It will build / analyse the project and then deploy the corresponding 
#   artifcat on the develop branch. For all feature branch it will simply
#   build the project and deploy the corresponding artifcat.
#   The workflow is slightly more complex for the release / hotfix and 
#   master branches.
#   release/*:
#   On the release branch the project is build to create a release 
#   candidate that will then be deployed in the snapshot repository. 
#   NOTE: that the last commit on that branch will not deploy due to the 
#   SNAPSHOT restrictions in the snapshot repository
#   tags:
#   Since we only tag release on the master branch 
#
# REFERENCE:
#   https://gitlab.com/gitlab-org/gitlab-ce/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml
#
image: maven:3.3.9-jdk-8

variables:
  XDG_CACHE_HOME: /cache
  MAVEN_CLI_OPTS: "--settings .m2/settings.xml --activate-profiles CI_BUILD --batch-mode --fail-at-end --show-version -DinstallAtEnd=true"
  #
  # The important settings here are the memory related parameter that are necesary
  #   in order for some sonar invocation not to fail with an OOM exception. The other
  #   important settings is the maven.repo.local parameter that allows caching the 
  #   different maven artifacts
  #
  #   -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.showDateTime=true
  # BEWARE: the -Dsonar.host parameter is different from when using 'sonar-scanner' (-Dsonar.host.url)
  SONAR_OPTS: "-Dsonar.host=$SONAR_URL -Dsonar.login=$SONAR_USERNAME -Dsonar.password=$SONAR_PASSWORD"
  MAVEN_OPTS: "-Xmx1536m -Xms256m -Dmaven.repo.local=/cache/.m2/repository -Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN"
  HTTP_PROXY_OPTS: "-Dhttp.proxyHost=$HTTP_PROXY_HOST -Dhttp.proxyPort=$HTTP_PROXY_PORT -Dhttps.proxyHost=$HTTP_PROXY_HOST -Dhttps.proxyPort=$HTTP_PROXY_PORT"
  
cache:
  paths:
#    - .m2/repository
    - ~/.sonar/cache
    - target

before_script:
  - mkdir -p /cache/.m2/repository
  - mkdir -p .m2
  - echo '<?xml version="1.0" encoding="UTF-8"?><settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"><servers><server><id>AFBAWS</id><username>${env.ARTIFACTORY_USERNAME}</username><password>${env.ARTIFACTORY_PASSWORD}</password></server><server><id>AFBRELEASES</id><username>${env.ARTIFACTORY_USERNAME}</username><password>${env.ARTIFACTORY_PASSWORD}</password></server><server><id>AFBSNAPSHOTS</id><username>${env.ARTIFACTORY_USERNAME}</username><password>${env.ARTIFACTORY_PASSWORD}</password></server></servers><mirrors><mirror><mirrorOf>*</mirrorOf><id>AFBAWS</id><url>${env.ARTIFACTORY_URL}/repo</url></mirror></mirrors><proxies><proxy><id>proxy-http</id><active>true</active><protocol>http</protocol><host>${env.HTTP_PROXY_HOST}</host><port>3128</port><nonProxyHosts>localhost|127.0.0.1|*.corp|180.*|172.*</nonProxyHosts></proxy><proxy><id>proxy-https</id><active>true</active><protocol>https</protocol><host>${env.HTTP_PROXY_HOST}</host><port>3128</port><nonProxyHosts>localhost|127.0.0.1|*.corp|180.*|172.*</nonProxyHosts></proxy></proxies></settings>' > .m2/settings.xml

stages:
  - build
  - test
  - analysis
  - deploy

build:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS $HTTP_PROXY_OPTS clean install
  artifacts:
    paths:
      - 'target/classes'
      - '*/target/classes'
    expire_in: 1 day

coverage:
  stage: test
  script:
    - mvn $MAVEN_CLI_OPTS $HTTP_PROXY_OPTS clean org.jacoco:jacoco-maven-plugin:prepare-agent test
    - mvn $MAVEN_CLI_OPTS $HTTP_PROXY_OPTS org.jacoco:jacoco-maven-plugin:prepare-agent clean test
  artifacts:
    reports:
      junit: target/surefire-reports/*.xml    
    paths:
      - target/jacoco.exec
    expire_in: 1 day
  allow_failure: true

#
# This step is allowed to failed because some project use API class, that do
# not actually any code (such javax/servlet/jsp/tagext/TagSupport found 
# instance in javax:javaee-api). Took the decision to fail PMD instead of 
# referencing a specific runtime, in order to avoid the use of non "standard"
# API 
#
pmd:
  stage: test
  script:
    - mvn $MAVEN_CLI_OPTS $HTTP_PROXY_OPTS pmd:pmd
  artifacts:
    paths:
      - target/pmd.xml
    expire_in: 1 day
  allow_failure: true

checkstyle:
  stage: test
  script:
    - mvn $MAVEN_CLI_OPTS $HTTP_PROXY_OPTS checkstyle:checkstyle
  artifacts:
    paths:
      - target/checkstyle-result.xml
    expire_in: 1 day

sonar:
  stage: analysis
  script:
    - mvn $MAVEN_CLI_OPTS $HTTP_PROXY_OPTS -DskipTests=true verify
    - mvn $MAVEN_CLI_OPTS $HTTP_PROXY_OPTS $SONAR_OPTS sonar:sonar
  only:
    - develop

deploy to artifactory:
  stage: deploy
  script:
    - mvn $MAVEN_CLI_OPTS $HTTP_PROXY_OPTS package source:jar javadoc:jar deploy:deploy
  
