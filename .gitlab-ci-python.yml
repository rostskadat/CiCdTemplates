#
# Reference: https://docs.gitlab.com/ee/ci/yaml/#include
#
# BEWARE: The syntax below is only available from 11.7 and therefore can not be used
# - project: 'my-group/my-project'
#   file: '/templates/.gitlab-ci-template.yml'
#include:
#  - 'https://raw.githubusercontent.com/rostskadat/CiCdTemplates/master/.gitlab-ci-python.yml'

#
# In order to pull the image you need to login into the ECR registry. You can 
#   do that periodically using a cron job, to login every 10 minutes
# */10 * * * * root /bin/bash -c '$(aws ecr get-login --region eu-west-1 --no-include-email)'
#
image: 791682668801.dkr.ecr.eu-west-1.amazonaws.com/repo/cicd-python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  # NOTE that for XDG_CACHE_HOME to properly work the /etc/gitlab-runner/config.toml 
  # must have the 'volumes = ["/cache"]'
  XDG_CACHE_HOME: /cache
  TWINE_USERNAME: $PYPI_USERNAME
  TWINE_PASSWORD: $PYPI_PASSWORD
  # BEWARE: the -Dsonar.host.url parameter is different from when using 'mvn sonar:sonar' (-Dsonar.host)
  SONAR_OPTS: "-Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_USERNAME -Dsonar.password=$SONAR_PASSWORD"
  SONAR_SCANNER_OPTS: "-Dhttp.proxyHost=$HTTP_PROXY_HOST -Dhttp.proxyPort=$HTTP_PROXY_PORT -Dhttps.proxyHost=$HTTP_PROXY_HOST -Dhttps.proxyPort=$HTTP_PROXY_PORT"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
#cache:
#  paths:
#   - /cache/pip
#   - /root/.m2/repository
    
stages:
#  - triage
  - build
  - package
  - deploy

.shared: &build_image
  stage: build
  before_script:
    - pip install --requirement test-requirements.txt
    - pip install --requirement requirements.txt --extra-index-url $PYPI_URL
    # Some Python tools (Lifecycle, etc) use Maven in there unit test and 
    #   therefore it needs to be configured (mainly pointing to the default 
    #   repository).
    - mkdir -p /root/.m2/repository
    - echo '<?xml version="1.0" encoding="UTF-8"?><settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"><servers><server><id>AFBAWS</id><username>${env.ARTIFACTORY_USERNAME}</username><password>${env.ARTIFACTORY_PASSWORD}</password></server><server><id>AFBRELEASES</id><username>${env.ARTIFACTORY_USERNAME}</username><password>${env.ARTIFACTORY_PASSWORD}</password></server><server><id>AFBSNAPSHOTS</id><username>${env.ARTIFACTORY_USERNAME}</username><password>${env.ARTIFACTORY_PASSWORD}</password></server></servers><mirrors><mirror><mirrorOf>*</mirrorOf><id>AFBAWS</id><url>${env.ARTIFACTORY_URL}/repo</url></mirror></mirrors><proxies><proxy><id>proxy-http</id><active>true</active><protocol>http</protocol><host>${env.HTTP_PROXY_HOST}</host><port>3128</port><nonProxyHosts>localhost|127.0.0.1|*.corp|180.*|172.*</nonProxyHosts></proxy><proxy><id>proxy-https</id><active>true</active><protocol>https</protocol><host>${env.HTTP_PROXY_HOST}</host><port>3128</port><nonProxyHosts>localhost|127.0.0.1|*.corp|180.*|172.*</nonProxyHosts></proxy></proxies></settings>' > /root/.m2/settings.xml
    # Needs to adjust PYTHONPATH because it does not contain src folder when not 
    # running through setup
    - export "PYTHONPATH=$CI_PROJECT_DIR/src:$PYTHONPATH"
  except:
    # No build on master (tags will take care of that...)
    - master

.shared: &package_image
  stage: package
  script:
    - python setup.py $TARGET_NAME
  artifacts:
    paths:
    - $TARGET_ARTIFACT
  except:
    # No package on master (tags will take care of that...)
    - master

test:
  <<: *build_image
  script:
    - pytest --rootdir=tests --cov=src --ignore-glob=*/resources/projects/* --verbose -n 4
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

sonar:
  stage: package
  script:
    - sonar-scanner $SONAR_OPTS || sonar-scanner $SONAR_OPTS
  except:
    - master

#lint:
#  stage: build
#  script:
#    - pylint src

#yapf:
#  stage: build
#  script:
#    - yapf --diff --recursive > .yapf
#    - [ -s .yapf ] && exit 1 || exit 0

package wheel:
  <<: *package_image
  variables:
     TARGET_NAME: bdist_wheel
     TARGET_ARTIFACT: dist/*.whl
  
package sdist:
  <<: *package_image
  variables:
     TARGET_NAME: sdist
     TARGET_ARTIFACT: dist/*.tar.gz

# do not deploy feature branches...
deploy:
  stage: deploy
  script:
    - twine upload --repository-url $PYPI_URL dist/*
  only:
    - develop
    - tags

#
#dry-run:triage:
#  image: ruby:2.4
#  stage: triage
#  script:
#    - gem install gitlab-triage
#    - gitlab-triage --help
#    - gitlab-triage --debug --dry-run --token $TRIAGE_API_TOKEN --source-id $CI_PROJECT_PATH --host-url https://gitlab.afbaws.com
#  when: manual
#  except:
#    - schedules
#  allow_failure: true

#run:triage:
#  image: ruby:2.4
#  stage: triage
#  script:
#    - gem install gitlab-triage
#    - gitlab-triage --debug --token $TRIAGE_API_TOKEN --source-id $CI_PROJECT_PATH --host-url https://gitlab.afbaws.com
#  only:
#    - schedules
#  allow_failure: true
